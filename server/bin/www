#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var net = require('net');

/**
 * DB initialization
 */

var db = require('../db/db');
var db_conf = require('../conf/db')[process.env.NODE_ENV || 'development'];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var server2 = net.createServer(socketListener);

/**
 * Listen on provided port, on all network interfaces.
 */

db.sequelize.sync({
  force: db_conf.force
}).then(function () {
  db.init();

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  server2.listen(3001);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Connection Listener
 */

var sockets = [];
function socketListener(s) {
  sockets.push(s);
}

db.Mpu6050.addHook('afterCreate', 'notifyUsers', (mpu6050, options) => {
  //console.log('afterCreate', mpu6050, options);
  sockets.forEach(function (s) {
    try {
      s.write(JSON.stringify(mpu6050));
    } catch (e) { }
  });
});

db.Mpu6050.addHook('afterUpdate', 'notifyUsers', (mpu6050, options) => {
  //console.log('afterUpdate', mpu6050, options);
  sockets.forEach(function (s) {
    try {
      s.write(JSON.stringify(mpu6050));
    } catch (e) { }
  });
});